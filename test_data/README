If you want to be able to run the query scripts, do the following:

1) Install the haskell cabal.
   In ubuntu this is "sudo apt-get install cabal-install"

2) Install cabal-dev. Since you have cabal you can do "cabal install cabal-dev"

3) cd query_scripts ; cabal-dev install

You will now find all the query script binaries in query_scripts/cabal-dev/bin/

4) create a databse in $USERNAME.db and run the SQL at the end of this file to create your tables.

5) Use query_scripts/cabal-dev/bin/add_test_cases to add the test cases you're interested in to your database. One option would be:

  cd ~/Documents/jscert/src/core/trunk/ ;
  test_data/query_scripts/cabal-dev/bin/add_test_cases `find tests/ -type f -name \*.js`

6) Run the runtests.py script with the --dbsave option to save the results of your test run.

7) cd test_data/query_scripts and run whatever queries you want to run :)

========================================================
This file will shortly contain useful instructions for how to use our
results databases to answer interseting questions about the behaviour
various JS implementations.

For now, it just contains notes about what tools gds is using to
build those databases.

I'm using ghc 7.6.2 and cabal.

I depend on HDBC, and when I did cabal install HDBC, I got HDBC-2.3.1.2

sudo aptitude install libsqlite3-dev

cabal install haskelldb-hdbc-sqlite3

cabal install hastache

cabal install cmdargs

cabal install regex-pcre

#+begin_src sql
CREATE TABLE single_test_runs (
  id integer primary key autoincrement
  , test_id text references test_cases(filepath)
  , batch_id integer references test_batch_runs(id)
  , status text
  , stdout text
  , stderr text
  );
CREATE TABLE test_batch_runs (
  id integer primary key autoincrement
  , time integer
  , implementation text
  , impl_path text
  , impl_version text
  , title text
  , notes text
  , timestamp integer
  , system text
  , osnodename text
  , osrelease text
  , osversion text
  , hardware text
  );
CREATE TABLE test_cases (
  filepath text primary key
  , negative integer
  );
CREATE TABLE test_group_memberships (
  group_id integer references test_groups(id)
  , test_id integer references test_cases(filepath)
  );
CREATE TABLE test_groups (
  id integer primary key autoincrement
  , description text
  );
CREATE TABLE fail_group_memberships (
  group_id integer references test_groups(id)
  , test_id integer references test_cases(filepath)
  );
CREATE TABLE fail_groups (
  id integer primary key autoincrement
  , description text
  , reason text
  );
#+end_src
